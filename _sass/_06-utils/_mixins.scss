
// Color util classes
@mixin color($class-extension, $color){

  .bg--#{$class-extension} {
    background-color: $color;
  }
  .color--#{$class-extension}{
    color: $color;
  }

  .border--#{$class-extension} {
    border-color: $color;
  }
  
  a.color--#{$class-extension} {
    color: $color;
    &:hover {
      color: darken($color, 10%);
    }
    &:focus {
      color: darken($color, 10%);
    }
    &:active {
      color: darken($color, 10%);
    }
  }
}

// padding classes
@mixin padding($size, $value){
  .p-t-#{$size} {
    padding-top: $value;
  }
  .p-b-#{$size} {
    padding-bottom: $value;
  }
  .p-r-#{$size} {
    padding-right: $value;
  }
  .p-l-#{$size} {
    padding-left: $value;
  }
  .p-y-#{$size} {
    padding-bottom: $value;
    padding-top: $value;
  }
  .p-x-#{$size} {
    padding-left: $value;
    padding-right: $value;
  }
}

// margin classes
@mixin margin($size, $value){
  .m-t-#{$size} {
    margin-top: $value;
  }
  .m-b-#{$size} {
    margin-bottom: $value;
  }
  .m-r-#{$size} {
    margin-right: $value;
  }
  .m-l-#{$size} {
    margin-left: $value;
  }
  .m-y-#{$size} {
    margin-bottom: $value;
    margin-top: $value;
  }
  .m-x-#{$size} {
    margin-left: $value;
    margin-right: $value;
  }
}

// position classes
@mixin el($size, $value){
  .el-t-#{$size} {
    @extend .el;
    top: $value;
  }
  .el-r-#{$size} {
    @extend .el;
    right: $value;
  }
  .el-b-#{$size} {
    @extend .el;
    bottom: $value;
  }
  .el-l-#{$size} {
    @extend .el;
    left: $value;
  }
}

// unitless function to convert px to em
@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1em;
}

// breakpoint mixin
@mixin breakpoint($mq01: 0, $mq2: false, $maxmin: max-width) {
  @if $mq2 == false {
    @media ($maxmin: $mq01) {
      @content;
    }
  }
  @else {
    @media (min-width: $mq01) and (max-width: $mq2) {
      @content;
    }
  }
}

// responsive font size mixin
@mixin font-size-map($font-size-map) {
  @each $breakpoint, $font-size in $font-size-map {
    @if $breakpoint == null {
      font-size: em($font-size);
    } @else {
      @include breakpoint($breakpoint) {
        font-size: em($font-size);
      }
    }
  }
}